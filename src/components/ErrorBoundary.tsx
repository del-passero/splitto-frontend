// src/components/ErrorBoundary.tsx
import React from "react"

type Props = { children: React.ReactNode }
type State = { hasError: boolean; error?: any }

export class ErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false }

  static getDerivedStateFromError(error: any): State {
    return { hasError: true, error }
  }

  componentDidCatch(error: any, info: any) {
    // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ–≥ ‚Äî –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Sentry/–ª–æ–≥–≥–µ—Ä
    console.error("UI crashed:", error, info)
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{ padding: 16 }}>
          <h2>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï</h2>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç ‚Äî –æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
          <pre style={{ whiteSpace: "pre-wrap" }}>{String(this.state.error ?? "")}</pre>
        </div>
      )
    }
    return this.props.children
  }
}
